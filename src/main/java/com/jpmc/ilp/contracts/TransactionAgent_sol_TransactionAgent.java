package com.jpmc.ilp.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class TransactionAgent_sol_TransactionAgent extends Contract {
    private static final String BINARY = "";

    protected TransactionAgent_sol_TransactionAgent(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TransactionAgent_sol_TransactionAgent(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<StashCreatedEventResponse> getStashCreatedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("StashCreated", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<StashCreatedEventResponse> responses = new ArrayList<StashCreatedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            StashCreatedEventResponse typedResponse = new StashCreatedEventResponse();
            typedResponse._name = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._bank = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<StashCreatedEventResponse> stashCreatedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("StashCreated", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, StashCreatedEventResponse>() {
            @Override
            public StashCreatedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                StashCreatedEventResponse typedResponse = new StashCreatedEventResponse();
                typedResponse._name = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._bank = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<InitIlpTransferEventResponse> getInitIlpTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("InitIlpTransfer", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<InitIlpTransferEventResponse> responses = new ArrayList<InitIlpTransferEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            InitIlpTransferEventResponse typedResponse = new InitIlpTransferEventResponse();
            typedResponse.trnsactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._paymentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<InitIlpTransferEventResponse> initIlpTransferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("InitIlpTransfer", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, InitIlpTransferEventResponse>() {
            @Override
            public InitIlpTransferEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                InitIlpTransferEventResponse typedResponse = new InitIlpTransferEventResponse();
                typedResponse.trnsactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._paymentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<SupenseAccountCreditRequestEventResponse> getSupenseAccountCreditRequestEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SupenseAccountCreditRequest", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<SupenseAccountCreditRequestEventResponse> responses = new ArrayList<SupenseAccountCreditRequestEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            SupenseAccountCreditRequestEventResponse typedResponse = new SupenseAccountCreditRequestEventResponse();
            typedResponse.transactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._paymentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SupenseAccountCreditRequestEventResponse> supenseAccountCreditRequestEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SupenseAccountCreditRequest", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SupenseAccountCreditRequestEventResponse>() {
            @Override
            public SupenseAccountCreditRequestEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                SupenseAccountCreditRequestEventResponse typedResponse = new SupenseAccountCreditRequestEventResponse();
                typedResponse.transactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._paymentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<ConfirmPaymentAtDestinationEventResponse> getConfirmPaymentAtDestinationEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("confirmPaymentAtDestination", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ConfirmPaymentAtDestinationEventResponse> responses = new ArrayList<ConfirmPaymentAtDestinationEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ConfirmPaymentAtDestinationEventResponse typedResponse = new ConfirmPaymentAtDestinationEventResponse();
            typedResponse.trnsactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._paymentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ConfirmPaymentAtDestinationEventResponse> confirmPaymentAtDestinationEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("confirmPaymentAtDestination", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ConfirmPaymentAtDestinationEventResponse>() {
            @Override
            public ConfirmPaymentAtDestinationEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ConfirmPaymentAtDestinationEventResponse typedResponse = new ConfirmPaymentAtDestinationEventResponse();
                typedResponse.trnsactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._paymentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<ConfirmIlpPaymentResponseEventResponse> getConfirmIlpPaymentResponseEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("confirmIlpPaymentResponse", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ConfirmIlpPaymentResponseEventResponse> responses = new ArrayList<ConfirmIlpPaymentResponseEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ConfirmIlpPaymentResponseEventResponse typedResponse = new ConfirmIlpPaymentResponseEventResponse();
            typedResponse.trnsactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._paymentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ConfirmIlpPaymentResponseEventResponse> confirmIlpPaymentResponseEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("confirmIlpPaymentResponse", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ConfirmIlpPaymentResponseEventResponse>() {
            @Override
            public ConfirmIlpPaymentResponseEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ConfirmIlpPaymentResponseEventResponse typedResponse = new ConfirmIlpPaymentResponseEventResponse();
                typedResponse.trnsactionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._paymentId = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> getBanksSuspenseStash(String _bankName) {
        Function function = new Function(
                "getBanksSuspenseStash", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_bankName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> doesStashExist(String _bankName) {
        Function function = new Function(
                "doesStashExist", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_bankName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> confirmPaymentRequestAtDestination(BigInteger _payTransactionId, String paymentId) {
        Function function = new Function(
                "confirmPaymentRequestAtDestination", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_payTransactionId), 
                new org.web3j.abi.datatypes.Utf8String(paymentId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createTransfer(String _origBankName, String _origStashType, String _destBankName, String _destStashType, BigInteger _transactionAmt, String _remarks, String sourceCurrency, String destinationCurrency, String paymentId) {
        Function function = new Function(
                "createTransfer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_origBankName), 
                new org.web3j.abi.datatypes.Utf8String(_origStashType), 
                new org.web3j.abi.datatypes.Utf8String(_destBankName), 
                new org.web3j.abi.datatypes.Utf8String(_destStashType), 
                new org.web3j.abi.datatypes.generated.Uint256(_transactionAmt), 
                new org.web3j.abi.datatypes.Utf8String(_remarks), 
                new org.web3j.abi.datatypes.Utf8String(sourceCurrency), 
                new org.web3j.abi.datatypes.Utf8String(destinationCurrency), 
                new org.web3j.abi.datatypes.Utf8String(paymentId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createBankStash(String _bankName, String _bankAddress) {
        Function function = new Function(
                "createBankStash", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_bankName), 
                new org.web3j.abi.datatypes.Address(_bankAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createConnectorStash(String _connectorName, String _connectorAddress) {
        Function function = new Function(
                "createConnectorStash", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_connectorName), 
                new org.web3j.abi.datatypes.Address(_connectorAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> pendingTransactions(BigInteger param0) {
        Function function = new Function("pendingTransactions", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> initIlpTransfer(String _origBankName, BigInteger _txnAmt, String _remarks, String _origAccountAddress, String _destAccountAddress, String sourceCurrency, String destinationCurrency, String paymentId) {
        Function function = new Function(
                "initIlpTransfer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_origBankName), 
                new org.web3j.abi.datatypes.generated.Uint256(_txnAmt), 
                new org.web3j.abi.datatypes.Utf8String(_remarks), 
                new org.web3j.abi.datatypes.Utf8String(_origAccountAddress), 
                new org.web3j.abi.datatypes.Utf8String(_destAccountAddress), 
                new org.web3j.abi.datatypes.Utf8String(sourceCurrency), 
                new org.web3j.abi.datatypes.Utf8String(destinationCurrency), 
                new org.web3j.abi.datatypes.Utf8String(paymentId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> rejectTransfer(BigInteger _transactionNum, String _remarks) {
        Function function = new Function(
                "rejectTransfer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_transactionNum), 
                new org.web3j.abi.datatypes.Utf8String(_remarks)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> processIlpPaymentTransferResponse(String _paytId, BigInteger txnNum) {
        Function function = new Function(
                "processIlpPaymentTransferResponse", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_paytId), 
                new org.web3j.abi.datatypes.generated.Uint256(txnNum)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createSimpleTransfer(String _origBankName, String _origStashType, String _destBankName, String _destStashType, BigInteger _transactionAmt, String _remarks, String sourceCurrency, String destinationCurrency, String paymentId) {
        Function function = new Function(
                "createSimpleTransfer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_origBankName), 
                new org.web3j.abi.datatypes.Utf8String(_origStashType), 
                new org.web3j.abi.datatypes.Utf8String(_destBankName), 
                new org.web3j.abi.datatypes.Utf8String(_destStashType), 
                new org.web3j.abi.datatypes.generated.Uint256(_transactionAmt), 
                new org.web3j.abi.datatypes.Utf8String(_remarks), 
                new org.web3j.abi.datatypes.Utf8String(sourceCurrency), 
                new org.web3j.abi.datatypes.Utf8String(destinationCurrency), 
                new org.web3j.abi.datatypes.Utf8String(paymentId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple9<BigInteger, String, String, String, String, BigInteger, String, BigInteger, Boolean>> transactions(BigInteger param0) {
        final Function function = new Function("transactions", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple9<BigInteger, String, String, String, String, BigInteger, String, BigInteger, Boolean>>(
                new Callable<Tuple9<BigInteger, String, String, String, String, BigInteger, String, BigInteger, Boolean>>() {
                    @Override
                    public Tuple9<BigInteger, String, String, String, String, BigInteger, String, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple9<BigInteger, String, String, String, String, BigInteger, String, BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (Boolean) results.get(8).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> getStash(String _bankName, String stashType) {
        Function function = new Function(
                "getStash", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_bankName), 
                new org.web3j.abi.datatypes.Utf8String(stashType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getBankStash(String _bankName) {
        Function function = new Function(
                "getBankStash", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_bankName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getConnectorStash() {
        Function function = new Function(
                "getConnectorStash", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> changeOwner(String newOwner) {
        Function function = new Function(
                "changeOwner", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> processIlpPaymentTransferRequest(String payids, String _destAccountAddress, BigInteger _txnAmt, String _remarks, String sourCurr, String destCurr) {
        Function function = new Function(
                "processIlpPaymentTransferRequest", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(payids), 
                new org.web3j.abi.datatypes.Utf8String(_destAccountAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(_txnAmt), 
                new org.web3j.abi.datatypes.Utf8String(_remarks), 
                new org.web3j.abi.datatypes.Utf8String(sourCurr), 
                new org.web3j.abi.datatypes.Utf8String(destCurr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<TransactionAgent_sol_TransactionAgent> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TransactionAgent_sol_TransactionAgent.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<TransactionAgent_sol_TransactionAgent> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TransactionAgent_sol_TransactionAgent.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static TransactionAgent_sol_TransactionAgent load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TransactionAgent_sol_TransactionAgent(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static TransactionAgent_sol_TransactionAgent load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TransactionAgent_sol_TransactionAgent(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class StashCreatedEventResponse {
        public String _name;

        public String _bank;
    }

    public static class InitIlpTransferEventResponse {
        public BigInteger trnsactionId;

        public String _paymentId;
    }

    public static class SupenseAccountCreditRequestEventResponse {
        public BigInteger transactionId;

        public String _paymentId;
    }

    public static class ConfirmPaymentAtDestinationEventResponse {
        public BigInteger trnsactionId;

        public String _paymentId;
    }

    public static class ConfirmIlpPaymentResponseEventResponse {
        public BigInteger trnsactionId;

        public String _paymentId;
    }
}
